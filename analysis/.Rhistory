for (r in 1:n.genes) {
YtY[r,] <- as.numeric(strsplit(all_data[7+r], split='\t', perl=T)[[1]])
}
YtY
as.numeric(strsplit(all_data[8+n.genes], split='\t', perl=T)[[1]][2])
as.numeric(strsplit(all_data[10+n.genes], split='\t', perl=T)[[1]])
as.numeric(strsplit(all_data[10+n.genes], split='\t', perl=T)[[1]])[5]
sxx <- as.numeric(strsplit(all_data[8+n.genes], split='\t', perl=T)[[1]][2])   #X'X, a scalar
YtX <- as.numeric(strsplit(all_data[10+n.genes], split='\t', perl=T)[[1]])    #Y'X, a vector
sxx
-1+sqrt(1+2*sxx/n.ind)
suff.stat <- list(SYY = YtY/n.ind, sxx = sxx/n.ind, SYX = YtX/n.ind, SY1 = rep(0, n.genes), mu.g = -1+sqrt(1+2*sxx/n.ind))
suff.stat
source("../code/SimulateNetworkExpression.R")
source("../code/directionality_CGM.R")
getwd()
source("../R/SimulateNetworkExpression.R")
source("../R/directionality_CGM.R")
path <- '../data/cis_summary_data/muscleskeletal/thresh_80/ENSG00000112306.7_summary.txt'
all_data = readLines(path)
n.ind <- as.numeric(strsplit(all_data[2], split='\t', perl=T)[[1]][2])   #Number of independent measurements
chr <- as.numeric(strsplit(all_data[3], split='\t', perl=T)[[1]][2])    #Chromosome number
gene <- strsplit(all_data[4], split='\t', perl=T)[[1]][2]    #Gene of interest
SNP <- strsplit(all_data[5], split='\t', perl=T)[[1]][2]    #eQTL of interest
Gene.names <- strsplit(all_data[6], split='\t', perl=T)[[1]][2:length(strsplit(all_data[6], split='\t', perl=T)[[1]])]   #Column names for Y'Y
n.genes <- length(Gene.names)    #Number of genes in the network
YtY <- array(NA, dim=c(n.genes, n.genes))   #Y'Y
for (r in 1:n.genes) {
YtY[r,] <- as.numeric(strsplit(all_data[7+r], split='\t', perl=T)[[1]])
}
sxx <- as.numeric(strsplit(all_data[8+n.genes], split='\t', perl=T)[[1]][2])   #X'X, a scalar
YtX <- as.numeric(strsplit(all_data[10+n.genes], split='\t', perl=T)[[1]])    #Y'X, a vector
suff.stat <- list(SYY = YtY/n.ind, sxx = sxx/n.ind, SYX = YtX/n.ind, SY1 = rep(0, n.genes), mu.g = -1+sqrt(1+2*sxx/n.ind))
n.iter <- 3000
n.burn <- 1000
sigma.a <- 0.4
weights.sigma <- 1
gibbs <- Gibbs.dir(n.iter, n.burn, suff.stat, which(Gene.names == gene), n.ind, sigma.a, weights.sigma, n.genes-1)
gibbs
path <- '../data/cis_summary_data/muscleskeletal/thresh_80/ENSG00000105372.2_summary.txt'
all_data = readLines(path)
n.ind <- as.numeric(strsplit(all_data[2], split='\t', perl=T)[[1]][2])   #Number of independent measurements
chr <- as.numeric(strsplit(all_data[3], split='\t', perl=T)[[1]][2])    #Chromosome number
gene <- strsplit(all_data[4], split='\t', perl=T)[[1]][2]    #Gene of interest
SNP <- strsplit(all_data[5], split='\t', perl=T)[[1]][2]    #eQTL of interest
Gene.names <- strsplit(all_data[6], split='\t', perl=T)[[1]][2:length(strsplit(all_data[6], split='\t', perl=T)[[1]])]   #Column names for Y'Y
n.genes <- length(Gene.names)    #Number of genes in the network
YtY <- array(NA, dim=c(n.genes, n.genes))   #Y'Y
for (r in 1:n.genes) {
YtY[r,] <- as.numeric(strsplit(all_data[7+r], split='\t', perl=T)[[1]])
}
sxx <- as.numeric(strsplit(all_data[8+n.genes], split='\t', perl=T)[[1]][2])   #X'X, a scalar
YtX <- as.numeric(strsplit(all_data[10+n.genes], split='\t', perl=T)[[1]])    #Y'X, a vector
suff.stat <- list(SYY = YtY/n.ind, sxx = sxx/n.ind, SYX = YtX/n.ind, SY1 = rep(0, n.genes), mu.g = -1+sqrt(1+2*sxx/n.ind))
n.iter <- 3000
n.burn <- 1000
sigma.a <- 0.4
weights.sigma <- 1
gibbs <- Gibbs.dir(n.iter, n.burn, suff.stat, which(Gene.names == gene), n.ind, sigma.a, weights.sigma, n.genes-1)
gibbs
n.genes
path
path <- '../data/cis_summary_data/muscleskeletal/thresh_80/ENSG00000138207.8_summary.txt'
all_data = readLines(path)
n.ind <- as.numeric(strsplit(all_data[2], split='\t', perl=T)[[1]][2])   #Number of independent measurements
chr <- as.numeric(strsplit(all_data[3], split='\t', perl=T)[[1]][2])    #Chromosome number
gene <- strsplit(all_data[4], split='\t', perl=T)[[1]][2]    #Gene of interest
SNP <- strsplit(all_data[5], split='\t', perl=T)[[1]][2]    #eQTL of interest
Gene.names <- strsplit(all_data[6], split='\t', perl=T)[[1]][2:length(strsplit(all_data[6], split='\t', perl=T)[[1]])]   #Column names for Y'Y
n.genes <- length(Gene.names)    #Number of genes in the network
YtY <- array(NA, dim=c(n.genes, n.genes))   #Y'Y
for (r in 1:n.genes) {
YtY[r,] <- as.numeric(strsplit(all_data[7+r], split='\t', perl=T)[[1]])
}
sxx <- as.numeric(strsplit(all_data[8+n.genes], split='\t', perl=T)[[1]][2])   #X'X, a scalar
YtX <- as.numeric(strsplit(all_data[10+n.genes], split='\t', perl=T)[[1]])    #Y'X, a vector
suff.stat <- list(SYY = YtY/n.ind, sxx = sxx/n.ind, SYX = YtX/n.ind, SY1 = rep(0, n.genes), mu.g = -1+sqrt(1+2*sxx/n.ind))
n.iter <- 3000
n.burn <- 1000
sigma.a <- 0.4
weights.sigma <- 1
gibbs <- Gibbs.dir(n.iter, n.burn, suff.stat, which(Gene.names == gene), n.ind, sigma.a, weights.sigma, n.genes-1)
gibbs
gene
Gene.names
path <- '../data/cis_summary_data/muscleskeletal/thresh_80/ENSG00000197958.8_summary.txt'
all_data = readLines(path)
n.ind <- as.numeric(strsplit(all_data[2], split='\t', perl=T)[[1]][2])   #Number of independent measurements
chr <- as.numeric(strsplit(all_data[3], split='\t', perl=T)[[1]][2])    #Chromosome number
gene <- strsplit(all_data[4], split='\t', perl=T)[[1]][2]    #Gene of interest
SNP <- strsplit(all_data[5], split='\t', perl=T)[[1]][2]    #eQTL of interest
Gene.names <- strsplit(all_data[6], split='\t', perl=T)[[1]][2:length(strsplit(all_data[6], split='\t', perl=T)[[1]])]   #Column names for Y'Y
n.genes <- length(Gene.names)    #Number of genes in the network
YtY <- array(NA, dim=c(n.genes, n.genes))   #Y'Y
for (r in 1:n.genes) {
YtY[r,] <- as.numeric(strsplit(all_data[7+r], split='\t', perl=T)[[1]])
}
sxx <- as.numeric(strsplit(all_data[8+n.genes], split='\t', perl=T)[[1]][2])   #X'X, a scalar
YtX <- as.numeric(strsplit(all_data[10+n.genes], split='\t', perl=T)[[1]])    #Y'X, a vector
suff.stat <- list(SYY = YtY/n.ind, sxx = sxx/n.ind, SYX = YtX/n.ind, SY1 = rep(0, n.genes), mu.g = -1+sqrt(1+2*sxx/n.ind))
n.iter <- 3000
n.burn <- 1000
sigma.a <- 0.4
weights.sigma <- 1
gibbs <- Gibbs.dir(n.iter, n.burn, suff.stat, which(Gene.names == gene), n.ind, sigma.a, weights.sigma, n.genes-1)
gibbs
gene
n.genes
path <- '../data/cis_summary_data/adiposesubcutaneous/thresh_80/ENSG00000197958.8_summary.txt'
all_data = readLines(path)
n.ind <- as.numeric(strsplit(all_data[2], split='\t', perl=T)[[1]][2])   #Number of independent measurements
chr <- as.numeric(strsplit(all_data[3], split='\t', perl=T)[[1]][2])    #Chromosome number
gene <- strsplit(all_data[4], split='\t', perl=T)[[1]][2]    #Gene of interest
SNP <- strsplit(all_data[5], split='\t', perl=T)[[1]][2]    #eQTL of interest
Gene.names <- strsplit(all_data[6], split='\t', perl=T)[[1]][2:length(strsplit(all_data[6], split='\t', perl=T)[[1]])]   #Column names for Y'Y
n.genes <- length(Gene.names)    #Number of genes in the network
YtY <- array(NA, dim=c(n.genes, n.genes))   #Y'Y
for (r in 1:n.genes) {
YtY[r,] <- as.numeric(strsplit(all_data[7+r], split='\t', perl=T)[[1]])
}
sxx <- as.numeric(strsplit(all_data[8+n.genes], split='\t', perl=T)[[1]][2])   #X'X, a scalar
YtX <- as.numeric(strsplit(all_data[10+n.genes], split='\t', perl=T)[[1]])    #Y'X, a vector
suff.stat <- list(SYY = YtY/n.ind, sxx = sxx/n.ind, SYX = YtX/n.ind, SY1 = rep(0, n.genes), mu.g = -1+sqrt(1+2*sxx/n.ind))
n.iter <- 3000
n.burn <- 1000
sigma.a <- 0.4
weights.sigma <- 1
gibbs <- Gibbs.dir(n.iter, n.burn, suff.stat, which(Gene.names == gene), n.ind, sigma.a, weights.sigma, n.genes-1)
gibbs
path <- '../data/cis_summary_data/adiposesubcutaneous/thresh_80/ENSG00000197756.5_summary.txt'
all_data = readLines(path)
n.ind <- as.numeric(strsplit(all_data[2], split='\t', perl=T)[[1]][2])   #Number of independent measurements
chr <- as.numeric(strsplit(all_data[3], split='\t', perl=T)[[1]][2])    #Chromosome number
gene <- strsplit(all_data[4], split='\t', perl=T)[[1]][2]    #Gene of interest
SNP <- strsplit(all_data[5], split='\t', perl=T)[[1]][2]    #eQTL of interest
Gene.names <- strsplit(all_data[6], split='\t', perl=T)[[1]][2:length(strsplit(all_data[6], split='\t', perl=T)[[1]])]   #Column names for Y'Y
n.genes <- length(Gene.names)    #Number of genes in the network
YtY <- array(NA, dim=c(n.genes, n.genes))   #Y'Y
for (r in 1:n.genes) {
YtY[r,] <- as.numeric(strsplit(all_data[7+r], split='\t', perl=T)[[1]])
}
sxx <- as.numeric(strsplit(all_data[8+n.genes], split='\t', perl=T)[[1]][2])   #X'X, a scalar
YtX <- as.numeric(strsplit(all_data[10+n.genes], split='\t', perl=T)[[1]])    #Y'X, a vector
suff.stat <- list(SYY = YtY/n.ind, sxx = sxx/n.ind, SYX = YtX/n.ind, SY1 = rep(0, n.genes), mu.g = -1+sqrt(1+2*sxx/n.ind))
n.iter <- 3000
n.burn <- 1000
sigma.a <- 0.4
weights.sigma <- 1
gibbs <- Gibbs.dir(n.iter, n.burn, suff.stat, which(Gene.names == gene), n.ind, sigma.a, weights.sigma, n.genes-1)
gibbs
gibbs <- Gibbs.dir(n.iter, n.burn, suff.stat, which(Gene.names == gene), n.ind, sigma.a, weights.sigma, n.genes-1)
gibbs
sigma.a <- c(0.1, 0.2, 0.4)
weights.sigma <- c(1, 1, 1)
gibbs <- Gibbs.dir(n.iter, n.burn, suff.stat, which(Gene.names == gene), n.ind, sigma.a, weights.sigma, n.genes-1)
gibb
gibbs
mat <- matrix(rnorm(3e5*700), nrow=3e5, ncol=700)
dim(mat)
test <- t(mat) %*% mat
dim(test)
directory <- '~/Desktop/Uchicago/StephensGroup/TranseQTLs_EnglehardtStephens/GitWork/Trans-eQTL/data/cis_summary_data/adiposesubcutaneous/thresh_80'
Directory in which to perform the analysis
```{r}
directory <- '~/Desktop/Uchicago/StephensGroup/TranseQTLs_EnglehardtStephens/GitWork/Trans-eQTL/data/cis_summary_data/adiposesubcutaneous/thresh_80'
```
source("../R/SimulateNetworkExpression.R")  #Compute Bayes factors
source("../R/directionality_CGM.R")    #Gibbs Sampler
directory.in <- '../data/cis_summary_data/adiposesubcutaneous/thresh_80'
directory.out <- '../output/cis_summary_data/adiposesubcutaneous/thresh_80'
if (!file.exists(directory.out)) {
dir.string <- strsplit(directory.out, split="/")[[1]]
tmp.string = dir.string[1]
for (i in 2:length(dir.string)) {
tmp.string = file.path(tmp.string, dir.string[i])
if (!file.exists(tmp.string)) {
dir.create(tmp.string)
}
}
}
all_files <- list.files(directory.in)
N.genes <- rep(0, length(all.files))
N.genes <- rep(0, length(all_files))
length(all_files)
file = all_files[1]
file.path <- paste(directory.in, file, sep="/")
all_data = readLines(file.path)
tissue <- strsplit(all_data[1], split='\t', perl=T)[[1]][2]
n.ind <- as.numeric(strsplit(all_data[2], split='\t', perl=T)[[1]][2])   #Number of independent measurements
chr <- as.numeric(strsplit(all_data[3], split='\t', perl=T)[[1]][2])    #Chromosome number
gene <- strsplit(all_data[4], split='\t', perl=T)[[1]][2]    #Gene of interest
SNP <- strsplit(all_data[5], split='\t', perl=T)[[1]][2]    #eQTL of interest
Gene.names <- strsplit(all_data[6], split='\t', perl=T)[[1]][2:length(strsplit(all_data[6], split='\t', perl=T)[[1]])]   #Column names for Y'Y
n.genes <- length(Gene.names)    #Number of genes in the network
N.genes[count] = n.genes
YtY <- array(NA, dim=c(n.genes, n.genes))   #Y'Y
for (r in 1:n.genes) {
YtY[r,] <- as.numeric(strsplit(all_data[7+r], split='\t', perl=T)[[1]])
}
sxx <- as.numeric(strsplit(all_data[8+n.genes], split='\t', perl=T)[[1]][2])   #X'X, a scalar
YtX <- as.numeric(strsplit(all_data[10+n.genes], split='\t', perl=T)[[1]])    #Y'X, a vector
suff.stat <- list(SYY = YtY/n.ind, sxx = sxx/n.ind, SYX = YtX/n.ind, SY1 = rep(0, n.genes), mu.g = 0)
if (n.genes <= 15) {
n.iter <- 3000
n.burn <- 1000
} else {
if (n.genes <= 25) {
n.iter <- 4000
n.burn <- 2000
} else {
n.iter <- 5000
n.burn <- 2500
}
}
sigma.a <- c(0.1, 0.4)
weights.sigma <- c(1, 1)
gibbs <- Gibbs.dir(n.iter, n.burn, suff.stat, which(Gene.names == gene), n.ind, sigma.a, weights.sigma, n.genes-1)
gibbs
gibbs$post.mean[gibbs$D.ind]
n.genes
all_files <- list.files(directory.in)
N.genes <- rep(0, length(all_files))    #Number of genes in each network
PUP.source <- rep(0, length(all_files))  #Posterior probability the gene cis to the eQTL is unaffected
count = 1
for (file in all_files) {
file.path <- paste(directory.in, file, sep="/")
all_data = readLines(file.path)
tissue <- strsplit(all_data[1], split='\t', perl=T)[[1]][2]
n.ind <- as.numeric(strsplit(all_data[2], split='\t', perl=T)[[1]][2])   #Number of independent measurements
chr <- as.numeric(strsplit(all_data[3], split='\t', perl=T)[[1]][2])    #Chromosome number
gene <- strsplit(all_data[4], split='\t', perl=T)[[1]][2]    #Gene of interest
SNP <- strsplit(all_data[5], split='\t', perl=T)[[1]][2]    #eQTL of interest
Gene.names <- strsplit(all_data[6], split='\t', perl=T)[[1]][2:length(strsplit(all_data[6], split='\t', perl=T)[[1]])]   #Column names for Y'Y
n.genes <- length(Gene.names)    #Number of genes in the network
N.genes[count] = n.genes
YtY <- array(NA, dim=c(n.genes, n.genes))   #Y'Y
for (r in 1:n.genes) {
YtY[r,] <- as.numeric(strsplit(all_data[7+r], split='\t', perl=T)[[1]])
}
sxx <- as.numeric(strsplit(all_data[8+n.genes], split='\t', perl=T)[[1]][2])   #X'X, a scalar
YtX <- as.numeric(strsplit(all_data[10+n.genes], split='\t', perl=T)[[1]])    #Y'X, a vector
suff.stat <- list(SYY = YtY/n.ind, sxx = sxx/n.ind, SYX = YtX/n.ind, SY1 = rep(0, n.genes), mu.g = 0)
if (n.genes <= 15) {
n.iter <- 3000
n.burn <- 1000
} else {
if (n.genes <= 25) {
n.iter <- 4000
n.burn <- 2000
} else {
n.iter <- 5000
n.burn <- 2500
}
}
sigma.a <- c(0.1, 0.4)
weights.sigma <- c(1, 1)
gibbs <- Gibbs.dir(n.iter, n.burn, suff.stat, which(Gene.names == gene), n.ind, sigma.a, weights.sigma, n.genes-1)
PUP.source[count] = gibbs$post.mean[gibbs$D.ind]
gibbs.mat <- rbind(gibbs$post.mean)
colnames(gibbs.mat) <- Gene.names
out.file <- file.path(directory.out, sub("(summary)", '\\1.gibbs', file, perl=T))
write.table(gibbs.mat, out.file, col.names=T, row.names=F, append=F, quote=F, sep="\t")
print(paste0(as.character(count), " of ", as.character(length(all_files))))
count = count + 1
}
plot(N.genes, 1-PUP.source, main='Posterior Probability of Source Gene as a Function of Network Size', xlab='Number of Genes in Network', ylab='Posterior Probability Source Gene is Affected by SNP')
plot(sort(1-PUP.source))
director.in
directory.out
file.path(directory.out, sub("(summary)", '\\1.gibbs', file, perl=T))
gibbs.file = readlines(out.file)
gibbs.file = readLines(out.file)
gibbs.file
file
which(Gene.names == gene)
as.numeric(strsplit(gibbs.file[8], split='\t', perl=T)[[1]])[which(Gene.names == gene)]
which(Gene.names == gene)
run_gibbs = FALSE;   #Whether or not to run the Gibbs sampler. If not, I just look for the file in 'directory.out' to get the necessary information
count
if (run_gibbs) {
gibbs <- Gibbs.dir(n.iter, n.burn, suff.stat, which(Gene.names == gene), n.ind, sigma.a, weights.sigma, n.genes-1)
PUP.source[count] = gibbs$post.mean[gibbs$D.ind]
gibbs.mat <- rbind(gibbs$post.mean)
colnames(gibbs.mat) <- Gene.names
write.table(gibbs.mat, out.file, col.names=T, row.names=F, append=F, quote=F, sep="\t")
} else {
gibbs.file = readLines(out.file)
tmp.pup = as.numeric(strsplit(gibbs.file[8], split='\t', perl=T)[[1]])[which(Gene.names == gene)]
PUP.source[count] = tmp.pup
}
tmp.pup
length(PUP.source)
PUP.source[145] = 0
length(PUP.source)
file
store.pup = PUP.source
store.pup = PUP.source[1:143]
all_files <- list.files(directory.in)
N.genes <- rep(0, length(all_files))    #Number of genes in each network
PUP.source <- rep(0, length(all_files))  #Posterior probability the gene cis to the eQTL is unaffected
count = 1
for (file in all_files) {
file.path <- paste(directory.in, file, sep="/")
all_data = readLines(file.path)
tissue <- strsplit(all_data[1], split='\t', perl=T)[[1]][2]
n.ind <- as.numeric(strsplit(all_data[2], split='\t', perl=T)[[1]][2])   #Number of independent measurements
chr <- as.numeric(strsplit(all_data[3], split='\t', perl=T)[[1]][2])    #Chromosome number
gene <- strsplit(all_data[4], split='\t', perl=T)[[1]][2]    #Gene of interest
SNP <- strsplit(all_data[5], split='\t', perl=T)[[1]][2]    #eQTL of interest
Gene.names <- strsplit(all_data[6], split='\t', perl=T)[[1]][2:length(strsplit(all_data[6], split='\t', perl=T)[[1]])]   #Column names for Y'Y
n.genes <- length(Gene.names)    #Number of genes in the network
N.genes[count] = n.genes
YtY <- array(NA, dim=c(n.genes, n.genes))   #Y'Y
for (r in 1:n.genes) {
YtY[r,] <- as.numeric(strsplit(all_data[7+r], split='\t', perl=T)[[1]])
}
sxx <- as.numeric(strsplit(all_data[8+n.genes], split='\t', perl=T)[[1]][2])   #X'X, a scalar
YtX <- as.numeric(strsplit(all_data[10+n.genes], split='\t', perl=T)[[1]])    #Y'X, a vector
suff.stat <- list(SYY = YtY/n.ind, sxx = sxx/n.ind, SYX = YtX/n.ind, SY1 = rep(0, n.genes), mu.g = 0)
if (n.genes <= 15) {
n.iter <- 3000
n.burn <- 1000
} else {
if (n.genes <= 25) {
n.iter <- 4000
n.burn <- 2000
} else {
n.iter <- 5000
n.burn <- 2500
}
}
sigma.a <- c(0.1, 0.4)
weights.sigma <- c(1, 1)
out.file = file.path(directory.out, sub("(summary)", '\\1.gibbs', file, perl=T))
if (run_gibbs) {
gibbs <- Gibbs.dir(n.iter, n.burn, suff.stat, which(Gene.names == gene), n.ind, sigma.a, weights.sigma, n.genes-1)
PUP.source[count] = gibbs$post.mean[gibbs$D.ind]
gibbs.mat <- rbind(gibbs$post.mean)
colnames(gibbs.mat) <- Gene.names
write.table(gibbs.mat, out.file, col.names=T, row.names=F, append=F, quote=F, sep="\t")
} else {
gibbs.file = readLines(out.file)
tmp.pup = as.numeric(strsplit(gibbs.file[8], split='\t', perl=T)[[1]])[which(Gene.names == gene)]
PUP.source[count] = tmp.pup
}
print(paste0(as.character(count), " of ", as.character(length(all_files))))
count = count + 1
}
PUP.source - store.pup
jpeg('AnalyzeSummaryData_muscleskeletal80.jpeg')
plot(N.genes, 1-PUP.source, main='Posterior Probability of Source Gene as a Function of Network Size', xlab='Number of Genes in Network', ylab='Posterior Probability Source Gene is Affected by SNP')
dev.off()
jpeg('AnalyzeSummaryData_muscleskeletal80.jpeg', width = 550)
plot(N.genes, 1-PUP.source, main='Posterior Probability of Source Gene as a Function of Network Size', xlab='Number of Genes in Network', ylab='Posterior Probability Source Gene is Affected by SNP')
dev.off()
directory.in <- '../data/cis_summary_data/adiposesubcutaneous/thresh_80'
directory.out <- '../output/cis_summary_data/adiposesubcutaneous/thresh_80'
run_gibbs = FALSE;
all_files <- list.files(directory.in)
N.genes <- rep(0, length(all_files))    #Number of genes in each network
PUP.source <- rep(0, length(all_files))  #Posterior probability the gene cis to the eQTL is unaffected
all.post.probs <- c()   #To be used to generate a ROC plot
count = 1
for (file in all_files) {
file.path <- paste(directory.in, file, sep="/")
all_data = readLines(file.path)
tissue <- strsplit(all_data[1], split='\t', perl=T)[[1]][2]
n.ind <- as.numeric(strsplit(all_data[2], split='\t', perl=T)[[1]][2])   #Number of independent measurements
chr <- as.numeric(strsplit(all_data[3], split='\t', perl=T)[[1]][2])    #Chromosome number
gene <- strsplit(all_data[4], split='\t', perl=T)[[1]][2]    #Gene of interest
SNP <- strsplit(all_data[5], split='\t', perl=T)[[1]][2]    #eQTL of interest
Gene.names <- strsplit(all_data[6], split='\t', perl=T)[[1]][2:length(strsplit(all_data[6], split='\t', perl=T)[[1]])]   #Column names for Y'Y
n.genes <- length(Gene.names)    #Number of genes in the network
N.genes[count] = n.genes
YtY <- array(NA, dim=c(n.genes, n.genes))   #Y'Y
for (r in 1:n.genes) {
YtY[r,] <- as.numeric(strsplit(all_data[7+r], split='\t', perl=T)[[1]])
}
sxx <- as.numeric(strsplit(all_data[8+n.genes], split='\t', perl=T)[[1]][2])   #X'X, a scalar
YtX <- as.numeric(strsplit(all_data[10+n.genes], split='\t', perl=T)[[1]])    #Y'X, a vector
suff.stat <- list(SYY = YtY/n.ind, sxx = sxx/n.ind, SYX = YtX/n.ind, SY1 = rep(0, n.genes), mu.g = 0)
if (n.genes <= 15) {
n.iter <- 3000
n.burn <- 1000
} else {
if (n.genes <= 25) {
n.iter <- 4000
n.burn <- 2000
} else {
n.iter <- 5000
n.burn <- 2500
}
}
sigma.a <- c(0.1, 0.4)
weights.sigma <- c(1, 1)
out.file = file.path(directory.out, sub("(summary)", '\\1.gibbs', file, perl=T))
if (run_gibbs) {
gibbs <- Gibbs.dir(n.iter, n.burn, suff.stat, which(Gene.names == gene), n.ind, sigma.a, weights.sigma, n.genes-1)
PUP.source[count] = gibbs$post.mean[gibbs$D.ind]
gibbs.mat <- rbind(gibbs$post.mean)
colnames(gibbs.mat) <- Gene.names
write.table(gibbs.mat, out.file, col.names=T, row.names=F, append=F, quote=F, sep="\t")
} else {
gibbs.file = readLines(out.file)
tmp.probs <- as.numeric(strsplit(gibbs.file[8], split='\t', perl=T)[[1]])
PUP.source[count] = tmp.probs[which(Gene.names == gene)]
all.post.probs <- c(all.post.probs, tmp.probs)
}
#print(paste0(as.character(count), " of ", as.character(length(all_files))))
count = count + 1
}
warnings()
length(all.post.probs)
all.post.probs <- sort(all.post.probs)   #Posterior prob a gene is NOT a trans eQTL
est.FDR <- rep(0, length(all.post.probs))
est.FDR[1] <- all.post.probs[1]
est.sens <- rep(0, length(all.post.probs))
est.sens[1] <- 1
for (i in 2:length(est.FDR)) {
est.FDR[i] <- ((i-1)*est.FDR[i-1] + all.post.probs[i])/i
}
est.FDR[1:20]
est.FDR[1:100]
est.FDR[1:500]
est.FDR
hist(all.post.probs, breaks=50)
sum(all.post.probs)
sum(all.post.probs)/length(all.post.probs)
est.trans <- sum(1-all.post.probs)   #Expected number of trans genes affected (given the data)
est.trans
all_files <- list.files(directory.in)
N.genes <- rep(0, length(all_files))    #Number of genes in each network
PUP.source <- rep(0, length(all_files))  #Posterior probability the gene cis to the eQTL is unaffected
all.post.probs <- c()   #To be used to generate a ROC plot
count = 1
for (file in all_files) {
file.path <- paste(directory.in, file, sep="/")
all_data = readLines(file.path)
tissue <- strsplit(all_data[1], split='\t', perl=T)[[1]][2]
n.ind <- as.numeric(strsplit(all_data[2], split='\t', perl=T)[[1]][2])   #Number of independent measurements
chr <- as.numeric(strsplit(all_data[3], split='\t', perl=T)[[1]][2])    #Chromosome number
gene <- strsplit(all_data[4], split='\t', perl=T)[[1]][2]    #Gene of interest
SNP <- strsplit(all_data[5], split='\t', perl=T)[[1]][2]    #eQTL of interest
Gene.names <- strsplit(all_data[6], split='\t', perl=T)[[1]][2:length(strsplit(all_data[6], split='\t', perl=T)[[1]])]   #Column names for Y'Y
n.genes <- length(Gene.names)    #Number of genes in the network
N.genes[count] = n.genes
YtY <- array(NA, dim=c(n.genes, n.genes))   #Y'Y
for (r in 1:n.genes) {
YtY[r,] <- as.numeric(strsplit(all_data[7+r], split='\t', perl=T)[[1]])
}
sxx <- as.numeric(strsplit(all_data[8+n.genes], split='\t', perl=T)[[1]][2])   #X'X, a scalar
YtX <- as.numeric(strsplit(all_data[10+n.genes], split='\t', perl=T)[[1]])    #Y'X, a vector
suff.stat <- list(SYY = YtY/n.ind, sxx = sxx/n.ind, SYX = YtX/n.ind, SY1 = rep(0, n.genes), mu.g = 0)
if (n.genes <= 15) {
n.iter <- 3000
n.burn <- 1000
} else {
if (n.genes <= 25) {
n.iter <- 4000
n.burn <- 2000
} else {
n.iter <- 5000
n.burn <- 2500
}
}
sigma.a <- c(0.1, 0.4)
weights.sigma <- c(1, 1)
out.file = file.path(directory.out, sub("(summary)", '\\1.gibbs', file, perl=T))
if (run_gibbs) {
gibbs <- Gibbs.dir(n.iter, n.burn, suff.stat, which(Gene.names == gene), n.ind, sigma.a, weights.sigma, n.genes-1)
PUP.source[count] = gibbs$post.mean[gibbs$D.ind]
gibbs.mat <- rbind(gibbs$post.mean)
colnames(gibbs.mat) <- Gene.names
write.table(gibbs.mat, out.file, col.names=T, row.names=F, append=F, quote=F, sep="\t")
} else {
gibbs.file = readLines(out.file)
tmp.probs <- as.numeric(strsplit(gibbs.file[8], split='\t', perl=T)[[1]])
PUP.source[count] = tmp.probs[which(Gene.names == gene)]
all.post.probs <- c(all.post.probs, tmp.probs[-which(Gene.names == gene)])
}
#print(paste0(as.character(count), " of ", as.character(length(all_files))))
count = count + 1
}
all.post.probs <- sort(all.post.probs)   #Posterior prob a gene is NOT a trans eQTL
est.trans <- sum(1-all.post.probs)   #Expected number of trans genes affected (given the data)
est.FDR <- rep(0, length(all.post.probs))
est.FDR[1] <- all.post.probs[1]
est.sens <- rep(0, length(all.post.probs))
est.sens[1] <- (1 - all.post.probs[1])/est.trans
for (i in 2:length(est.FDR)) {
est.FDR[i] <- ((i-1)*est.FDR[i-1] + all.post.probs[i])/i
est.sens[i] <- est.sens[i-1] + (1 - all.post.probs[i])/est.trans
}
est.sens
plot(est.FDR, est.sens, type="l")
plot(est.FDR, est.sens, type="l", xlim=c(0,1))
lines(seq(max(est.FDR), 1, 100), rep(1, 100))
lines(seq(max(est.FDR), 1, length=100), rep(1, 100))
abline(v=0.05)
plot(est.FDR, est.sens, type="l", main='Estimate ROC Curve for Affected Genes Trans to SNP in Adipose', xlab="Estimated (conditional) False Discovery Rate", ylab='Estimated Sensitivity')
lines(seq(max(est.FDR), 1, length=100), rep(1, 100))
plot(est.FDR, est.sens, type="l", main='Estimate ROC Curve for Affected Genes Trans to SNP in Adipose', xlab="Estimated (conditional) False Discovery Rate", ylab='Estimated Sensitivity', xlim=c(0, max(0.6, est.FDR)))
lines(seq(max(est.FDR), 1, length=100), rep(1, 100))
jpeg('AnalyzeSummaryData_Adipose80_ROC.jpeg', width = 550)
plot(est.FDR, est.sens, type="l", main='Estimate ROC Curve for Affected Genes Trans to SNP in Adipose', xlab="Estimated (conditional) False Discovery Rate", ylab='Estimated Sensitivity', xlim=c(0, max(0.6, est.FDR)))
lines(seq(max(est.FDR), 1, length=100), rep(1, 100))
dev.off()
hist(all.post.probs)
hist(all.post.probs, breaks=30)
hist(1-all.post.probs, breaks=30, xlab="Posterior Probability Gene Trans to SNP is AFFECTED by SNP", ylab="Frequency", main="Histogram of Posterior Probabilities a Trans Gene is AFFECTED by SNP")
hist(1-all.post.probs, breaks=30, xlab="Posterior Probability Gene Trans to SNP is AFFECTED by SNP", ylab="Frequency", main="Histogram of Posterior Probabilities a Trans Gene is AFFECTED by SNP", xlim=c(0,1))
length(all_files)
